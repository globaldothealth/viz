{"version":3,"sources":["theme/globalStyles.ts","components/VocMap/styled.ts","utils/helperFunctions.ts","components/VocMap/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","MapContainer","styled","div","Card","Sidebar","VocLabel","p","VocSelect","select","Legend","LegendRow","LegendColorSample","props","color","LegendLabel","getRowsWithVocData","data","filter","row","any_variant_info","getMostRecentData","locations","forEach","push","location","uniqueLocations","Array","from","Set","recentData","locationArray","mostRecentDate","parse","epi_date","Date","mostRecentRowIndex","item","idx","date","isAfter","VocMap","mapboxgl","accessToken","process","mapContainer","useRef","map","useState","mapLoaded","setMapLoaded","vocData","setVocData","vocList","setVocList","chosenVoc","setChosenVoc","id","outline","label","layers","useEffect","current","Map","container","style","center","renderWorldCopies","minZoom","zoom","on","layer","addLayer","source","type","url","paint","duration","addControl","NavigationControl","rowsWithVoc","list","Object","keys","slice","mostRecentData","variantName","rowsWithData","filteredCountries","dataRow","countriesWithData","country","code","countriesWithoutData","countriesNotChecked","sortData","setLayersOpacity","setTimeout","setFilter","opacity","setPaintProperty","renderedLabelItems","ref","onChange","e","target","value","voc","replace","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5850c3c0.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\n// Some styles are commented out not to override css from viz app\nexport const GlobalStyle = createGlobalStyle`    \n    /* body {\n        margin: 0;\n        font-family: 'Roboto', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;        \n        background-color: #ECF3F0;\n    }\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }    \n    \n    #topbar-container {\n        background: #ECF3F0;\n        position: absolute;\n        width: 100%;\n        height: 72px;\n        z-index: 9;\n    } \n    #voc-map-container {\n    }\n    #logo {\n        height: 60px;\n        left: 10px;\n        position: fixed;\n        top: 10px;\n        z-index: 999;\n        display: flex;\n        align-items: center;\n    }\n    \n    #logo #helpGuide span {\n        font-size: 40px !important;\n    }\n    \n    .navlink-question-mark .help-guide-button .MuiSvgIcon-root {\n        font-size: 10px !important;\n    }\n    \n    #logo img {\n        border-right: 1px solid #555;\n        margin-right: 6px;\n        padding-right: 6px;\n        object-fit: contain;\n        vertical-align: middle;\n        width: 5ex;\n    }\n    \n    #logo a {\n        text-decoration: none !important;\n    }\n    \n    #logo span {\n        color: #0094e2;\n        font-size: 50px;\n        vertical-align: middle;\n        text-decoration: none;\n    } */\n`;\n","import styled from \"styled-components\";\n\nexport const MapContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst Card = styled.div`\n  position: absolute;\n  background-color: white;\n  z-index: 100;\n  padding: 20px;\n  border-radius: 5px;\n`;\n\nexport const Sidebar = styled(Card)`\n  top: 100px;\n  left: 50px;\n`;\n\nexport const VocLabel = styled.p`\n  font-size: 12px;\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\n\nexport const VocSelect = styled.select`\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nexport const Legend = styled(Card)`\n  bottom: 24px;\n  right: 50px;\n`;\n\nexport const LegendRow = styled.div`\n  display: flex;\n  align-items: center;\n\n  &:not(:last-of-type) {\n    margin-bottom: 10px;\n  }\n`;\n\ninterface LegendColorSampleProps {\n  color: string;\n}\n\nexport const LegendColorSample = styled.div<LegendColorSampleProps>`\n  width: 12px;\n  height: 12px;\n  border-radius: 24px;\n  background-color: ${(props) => props.color};\n`;\n\nexport const LegendLabel = styled.p`\n  font-size: 14px;\n  margin-left: 10px;\n`;\n","import { parse, isAfter } from \"date-fns\";\nimport { VocDataRow } from \"../models/VocDataRow\";\n\n// Get only rows that contain info about at least one VOC\nexport const getRowsWithVocData = (data: VocDataRow[]) => {\n  return data.filter((row) => row.any_variant_info === 1);\n};\n\n// Get only most recent data for each country from the list\nexport const getMostRecentData = (data: VocDataRow[]) => {\n  const locations: string[] = [];\n  data.forEach((row) => {\n    locations.push(row.location);\n  });\n\n  // Remove all duplicates from locations array\n  const uniqueLocations = Array.from(new Set(locations));\n\n  // For each unique location get the most recent data\n  const recentData: VocDataRow[] = [];\n\n  uniqueLocations.forEach((location) => {\n    const locationArray = data.filter((row) => row.location === location);\n    let mostRecentDate = parse(\n      locationArray[0].epi_date,\n      \"dd.MM.yyyy\",\n      new Date()\n    );\n    let mostRecentRowIndex = 0;\n\n    locationArray.forEach((item, idx) => {\n      const date = parse(item.epi_date, \"dd.MM.yyyy\", new Date());\n      if (isAfter(date, mostRecentDate)) {\n        mostRecentDate = date;\n        mostRecentRowIndex = idx;\n      }\n    });\n\n    recentData.push(locationArray[mostRecentRowIndex]);\n  });\n\n  return recentData;\n};\n\n// Get list of all available VOC's from the spreadsheet (hardcoded for now)\nexport const getVocList = (data: VocDataRow[]) => {\n  const keys = Object.keys(data[0]);\n  const vocList = keys.slice(12, 65);\n\n  return vocList;\n};\n\n// Get list of country codes\nexport const getCountryCodes = (countries: VocDataRow[]) => {\n  return countries.map((country) => country.code);\n};\n\n// Sort data based on VOC info availability and variant name\nexport const sortData = (\n  data: VocDataRow[],\n  variantName: string\n): {\n  countriesWithData: string[];\n  countriesWithoutData: string[];\n  countriesNotChecked: string[];\n} => {\n  const rowsWithData = getRowsWithVocData(data);\n  const recentData = getMostRecentData(rowsWithData);\n\n  let filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === 1\n  );\n  const countriesWithData = filteredCountries.map((country) => country.code);\n\n  filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === 0\n  );\n  const countriesWithoutData = filteredCountries.map((country) => country.code);\n\n  filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === \"\"\n  );\n  const countriesNotChecked = filteredCountries.map((country) => country.code);\n\n  return { countriesWithData, countriesWithoutData, countriesNotChecked };\n};\n","import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl, { Map } from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { VocDataRow } from \"../../models/VocDataRow\";\n\nimport data from \"../../data/voc-new.json\";\nimport {\n  MapContainer,\n  Sidebar,\n  VocSelect,\n  VocLabel,\n  Legend,\n  LegendRow,\n  LegendColorSample,\n  LegendLabel,\n} from \"./styled\";\nimport {\n  getRowsWithVocData,\n  getVocList,\n  getMostRecentData,\n  sortData,\n} from \"../../utils/helperFunctions\";\n\nconst ANIMATION_DURATION = 500; // map animation duration in ms\n\nexport const VocMap: React.FC = () => {\n  mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || \"\";\n\n  // eslint-disable-next-line\n  const mapContainer = useRef<any>(\"\");\n  const map = useRef<Map | null>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [vocData, setVocData] = useState<VocDataRow[]>();\n  const [vocList, setVocList] = useState<string[]>();\n  const [chosenVoc, setChosenVoc] = useState<string>();\n\n  // Layers to be displayed on map\n  const [layers] = useState<\n    { id: string; color: string; outline: string; label: string }[]\n  >([\n    {\n      id: \"checked-has-data\",\n      color: \"#29b1ea\",\n      outline: \"#0074ab\",\n      label: \"Checked, has data\",\n    },\n    {\n      id: \"checked-no-data\",\n      color: \"#88d0eb\",\n      outline: \"#007AEC\",\n      label: \"Checked, does not have data\",\n    },\n    {\n      id: \"not-checked\",\n      color: \"#FD9986\",\n      outline: \"#FD685B\",\n      label: \"Not checked\",\n    },\n  ]);\n\n  // Setup Mapbox and configure map\n  useEffect(() => {\n    if (map.current) return;\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: process.env.REACT_APP_MAP_THEME_URL,\n      center: [0, 40],\n      renderWorldCopies: false,\n      minZoom: 1.5,\n      zoom: 2.5,\n    })\n      .on(\"load\", () => {\n        // Add layers to the map\n        layers.forEach((layer) => {\n          map.current?.addLayer(\n            {\n              id: layer.id,\n              source: {\n                type: \"vector\",\n                url: \"mapbox://mapbox.country-boundaries-v1\",\n              },\n              \"source-layer\": \"country_boundaries\",\n              type: \"fill\",\n              paint: {\n                \"fill-color\": layer.color,\n                \"fill-opacity\": 0,\n                \"fill-outline-color\": layer.outline,\n                \"fill-opacity-transition\": { duration: ANIMATION_DURATION },\n              },\n            },\n            \"country-label\"\n          );\n\n          // map.current?.on('click', layer.id, (e) => {\n          //   console.log(e.lngLat);\n          //   new mapboxgl.Popup()\n          //     .setHTML(\"<p>Hello</p>\")\n          //     .setLngLat(e.lngLat)\n          //     .addTo(map.current);\n          // });\n        });\n\n        setMapLoaded(true);\n      })\n      .addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n  }, []);\n\n  // Prepare data\n  useEffect(() => {\n    const rowsWithVoc = getRowsWithVocData(data as VocDataRow[]);\n    const list = getVocList(rowsWithVoc);\n    const mostRecentData = getMostRecentData(rowsWithVoc);\n\n    setVocData(mostRecentData);\n    setVocList(list);\n    setChosenVoc(list[0]);\n  }, []);\n\n  // Display countries on map\n  useEffect(() => {\n    if (!vocData || !map.current || !mapLoaded || !chosenVoc) return;\n\n    const { countriesWithData, countriesWithoutData, countriesNotChecked } =\n      sortData(vocData, chosenVoc);\n\n    setLayersOpacity(0);\n\n    setTimeout(() => {\n      map.current?.setFilter(\"checked-has-data\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesWithData,\n      ]);\n\n      map.current?.setFilter(\"checked-no-data\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesWithoutData,\n      ]);\n\n      map.current?.setFilter(\"not-checked\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesNotChecked,\n      ]);\n\n      setLayersOpacity(1);\n    }, ANIMATION_DURATION);\n  }, [vocData, mapLoaded, chosenVoc]);\n\n  const handleVocChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setChosenVoc(e.target.value);\n  };\n\n  const setLayersOpacity = (opacity: number) => {\n    layers.forEach((layer) => {\n      map.current?.setPaintProperty(layer.id, \"fill-opacity\", opacity);\n    });\n  };\n\n  const renderedLabelItems = layers.map((layer) => (\n    <LegendRow key={layer.id}>\n      <LegendColorSample color={layer.color} />\n      <LegendLabel>{layer.label}</LegendLabel>\n    </LegendRow>\n  ));\n\n  return (\n    <>\n      <MapContainer ref={mapContainer} />\n      <Sidebar>\n        <VocLabel>Choose Variant</VocLabel>\n\n        <VocSelect onChange={handleVocChange}>\n          {vocList &&\n            vocList.map((voc) => (\n              <option key={voc} value={voc}>\n                {voc.replace(\"total_\", \"\")}\n              </option>\n            ))}\n        </VocSelect>\n      </Sidebar>\n\n      <Legend>{renderedLabelItems}</Legend>\n    </>\n  );\n};\n","import React from \"react\";\nimport { GlobalStyle } from \"./theme/globalStyles\";\n\nimport { VocMap } from \"./components/VocMap\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <VocMap />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"voc-map-container\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}