{"version":3,"sources":["utils/helperFunctions.ts","theme/globalStyles.ts","components/VocMap/styled.ts","data/statesData.ts","components/Sidebar/index.tsx","components/Sidebar/styled.ts","models/MapLayer.ts","components/Legend/styled.ts","components/Legend/index.tsx","components/VocMap/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DataStatus","BreakthroughStatus","GlobalStyle","createGlobalStyle","MapContainer","styled","div","statesList","name","stateId","VariantType","getMostRecentCountryData","data","dataWithAnyInfo","filter","row","code","getNonUsData","locations","forEach","push","location","uniqueLocations","Array","from","Set","recentData","locationArray","mostRecentDate","parse","epi_date","Date","mostRecentRowIndex","item","idx","date","isAfter","getMostRecentStatesData","statesNames","map","state","stateRowsWithVocData","includes","length","getDetailedData","dataList","chosenCountry","dataRow","breakthrough","status","Yes","No","ToBeDetemined","getBreakthroughStatusName","breakthrough_status","sourceUrl","source_url","countryName","dateChecked","SidebarContainer","props","sidebarHidden","SidebarTab","SidebarTabIcon","span","Label","label","block","Select","select","VariantSelectionContainer","StyledRadio","input","FillColor","OutlineColor","Sidebar","handleVariantChange","useState","VOC","variantType","setVariantType","vocArray","setVocArray","voiArray","setVoiArray","setSidebarHidden","useGoogleSheets","apiKey","process","sheetId","sheetsNames","loading","error","useEffect","alert","voc","el","trim","voi","vocList","vocEl","pango","whoLabel","voiList","voiEl","parseVariantData","handleVariantTypeChange","e","newVariantType","target","value","type","id","checked","onChange","htmlFor","VOI","replace","onClick","currentSidebarHidden","LegendContainer","Title","p","LegendRow","ColorSample","color","outlineColor","Legend","layers","layer","outline","NoData","CheckedHasData","CheckedNoData","NotChecked","VocMap","mapboxgl","accessToken","mapContainer","useRef","mapLoaded","setMapLoaded","vocCountryData","setVocCountryData","vocStateData","setVocStateData","chosenVoc","setChosenVoc","popupState","setPopupState","current","Map","container","style","center","renderWorldCopies","minZoom","zoom","on","mapRef","addSource","url","addLayer","source","paint","duration","lngLat","features","properties","locationCode","iso_3166_1_alpha_3","stateResolution","STATE_NAME","getCanvas","cursor","addControl","NavigationControl","Popup","className","closeButton","closeOnMove","setHTML","renderedPopupContent","setLngLat","addTo","mostRecentCountryData","mostRecentVocStateData","variantName","filteredCountries","countriesWithData","country","countriesWithoutData","countriesNotChecked","sortData","statesData","find","filteredStates","statesWithData","statesWithoutData","statesNotChecked","sortStatesData","setLayersOpacity","setTimeout","setFilter","opacity","setPaintProperty","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gk1hCAKYA,EAMAC,E,+CCRCC,EAAcC,YAAH,y7C,8CCDXC,EAAeC,IAAOC,IAAV,+D,gBCKZC,EAAa,CACxB,CAAEC,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,SAAUC,QAAS,MAC3B,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,aAAcC,QAAS,MAC/B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,cAAeC,QAAS,MAChC,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,SAAUC,QAAS,MAC3B,CAAED,KAAM,QAASC,QAAS,MAC1B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,OAAQC,QAAS,MACzB,CAAED,KAAM,SAAUC,QAAS,MAC3B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,YAAaC,QAAS,MAC9B,CAAED,KAAM,QAASC,QAAS,MAC1B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,gBAAiBC,QAAS,MAClC,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,YAAaC,QAAS,MAC9B,CAAED,KAAM,cAAeC,QAAS,MAChC,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,SAAUC,QAAS,MAC3B,CAAED,KAAM,gBAAiBC,QAAS,MAClC,CAAED,KAAM,aAAcC,QAAS,MAC/B,CAAED,KAAM,aAAcC,QAAS,MAC/B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,iBAAkBC,QAAS,MACnC,CAAED,KAAM,eAAgBC,QAAS,MACjC,CAAED,KAAM,OAAQC,QAAS,MACzB,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,SAAUC,QAAS,MAC3B,CAAED,KAAM,eAAgBC,QAAS,MACjC,CAAED,KAAM,eAAgBC,QAAS,MACjC,CAAED,KAAM,iBAAkBC,QAAS,MACnC,CAAED,KAAM,eAAgBC,QAAS,MACjC,CAAED,KAAM,YAAaC,QAAS,MAC9B,CAAED,KAAM,QAASC,QAAS,MAC1B,CAAED,KAAM,OAAQC,QAAS,MACzB,CAAED,KAAM,UAAWC,QAAS,MAC5B,CAAED,KAAM,WAAYC,QAAS,MAC7B,CAAED,KAAM,aAAcC,QAAS,MAC/B,CAAED,KAAM,gBAAiBC,QAAS,MAClC,CAAED,KAAM,YAAaC,QAAS,MAC9B,CAAED,KAAM,UAAWC,QAAS,Q,SHpDlBT,O,mCAAAA,I,iCAAAA,E,eAAAA,M,cAMAC,O,aAAAA,I,WAAAA,E,kBAAAA,M,KAML,I,cIIFS,EJCQC,EAA2B,SAACC,GACvC,IAAMC,EANoB,SAACD,GAC3B,OAAOA,EAAKE,QAAO,SAACC,GAAD,MAAsB,QAAbA,EAAIC,QAKRC,CAAaL,GAE/BM,EAAsB,GAC5BL,EAAgBM,SAAQ,SAACJ,GACvBG,EAAUE,KAAKL,EAAIM,aAIrB,IAAMC,EAAkBC,MAAMC,KAAK,IAAIC,IAAIP,IAGrCQ,EAA2B,GAwBjC,OAtBAJ,EAAgBH,SAAQ,SAACE,GACvB,IAAMM,EAAgBd,EAAgBC,QACpC,SAACC,GAAD,OAASA,EAAIM,WAAaA,KAExBO,EAAiBC,YACnBF,EAAc,GAAGG,SACjB,aACA,IAAIC,MAEFC,EAAqB,EAEzBL,EAAcR,SAAQ,SAACc,EAAMC,GAC3B,IAAMC,EAAON,YAAMI,EAAKH,SAAU,aAAc,IAAIC,MAChDK,YAAQD,EAAMP,KAChBA,EAAiBO,EACjBH,EAAqBE,MAIzBR,EAAWN,KAAKO,EAAcK,OAGzBN,GAIIW,EAA0B,SAACzB,GAEtC,IAAM0B,EAAc/B,EAAWgC,KAAI,SAACC,GAAD,OAAWA,EAAMhC,QAC9CiC,EAAuB7B,EAAKE,QAChC,SAACC,GAAD,OAASuB,EAAYI,SAAS3B,EAAIM,WAA0B,QAAbN,EAAIC,QAI/CU,EAA2B,GA2BjC,OAzBAY,EAAYnB,SAAQ,SAACX,GACnB,IAAMmB,EAAgBc,EAAqB3B,QACzC,SAACC,GAAD,OAASA,EAAIM,WAAab,KAG5B,GAAImB,EAAcgB,OAAS,EAAG,CAC5B,IAAIf,EAAiBC,YACnBF,EAAc,GAAGG,SACjB,aACA,IAAIC,MAEFC,EAAqB,EAEzBL,EAAcR,SAAQ,SAACc,EAAMC,GAC3B,IAAMC,EAAON,YAAMI,EAAKH,SAAU,aAAc,IAAIC,MAChDK,YAAQD,EAAMP,KAChBA,EAAiBO,EACjBH,EAAqBE,MAIzBR,EAAWN,KAAKO,EAAcK,QAI3BN,GAgEIkB,EAAkB,SAC7BC,EACAxB,GAOA,IAAMyB,EAAgBD,EAAS/B,QAC7B,SAACiC,GAAD,OAAaA,EAAQ/B,OAASK,GAAY0B,EAAQ1B,WAAaA,KAK3D2B,EAlCiC,SACvCC,GAEA,OAAQA,GACN,KAAKhD,EAAmBiD,IACtB,MAAO,MAET,KAAKjD,EAAmBkD,GACtB,MAAO,KAET,KAAKlD,EAAmBmD,cACtB,MAAO,mBAET,QACE,MAAO,KAoBUC,CAFMP,EAAc,GACtCQ,qBAGH,MAAO,CACLC,UAAWT,EAAc,GAAGU,WAC5BC,YAAaX,EAAc,GAAGzB,SAC9BqC,YAAaZ,EAAc,GAAGhB,SAC9BkB,iB,QKhLSW,EAAmBtD,IAAOC,IAAV,+TAczB,SAACsD,GAAD,OACAA,EAAMC,eAAN,6BAMSC,EAAazD,IAAOC,IAAV,4SAoBVyD,EAAiB1D,IAAO2D,KAAV,wGAKvB,SAACJ,GAAD,OACAA,EAAMC,eAAN,6CAUSI,EAAQ5D,IAAO6D,MAAV,oGAKd,SAACN,GAAD,OACAA,EAAMO,OAAN,yHASSC,EAAS/D,IAAOgE,OAAV,8GAONC,EAA4BjE,IAAOC,IAAV,8FAMzBiE,EAAclE,IAAOmE,MAAV,6E,iBDtEnB9D,K,UAAAA,E,WAAAA,M,KAKE,IE1BK+D,EAOAC,E,UFmBCC,EAAkC,SAAC,GAE3B,IADnBC,EACkB,EADlBA,oBAEA,EAAsCC,mBAASnE,EAAYoE,KAA3D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCH,mBAE9B,IAFF,mBAAOI,EAAP,KAAiBC,EAAjB,KAGA,EAAgCL,mBAE9B,IAFF,mBAAOM,EAAP,KAAiBC,EAAjB,KAGA,EAA0CP,oBAAS,GAAnD,mBAAOhB,EAAP,KAAsBwB,EAAtB,KAGA,EAAiCC,YAAgB,CAC/CC,OAAQC,0CACRC,QAASD,+CACTE,YAAa,CAACF,cAHR5E,EAAR,EAAQA,KAAM+E,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAOvBC,qBAAU,WACR,GAAID,EACFE,MAAMF,QAGR,GAAKhF,IAAQ+E,EAAb,CAEA,MJoM4B,SAC9B/E,GAKA,IAAMmF,EAAMnF,EAAKE,QAAO,SAACkF,GAAD,MAAgC,MAAxBA,EAAG,UAAUC,UACvCC,EAAMtF,EAAKE,QAAO,SAACkF,GAAD,MAAgC,MAAxBA,EAAG,UAAUC,UAe7C,MAAO,CAAEE,QAbOJ,EAAIxD,KAAI,SAAC6D,GACvB,MAAO,CACLC,MAAOD,EAAM,iBAAiBH,OAC9BK,SAAUF,EAAM,aAAaH,WAUfM,QAPFL,EAAI3D,KAAI,SAACiE,GACvB,MAAO,CACLH,MAAOG,EAAM,iBAAiBP,OAC9BK,SAAUE,EAAM,aAAaP,YItNFQ,CAC3B7F,EAAK,GAAGA,MADFuF,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,QAIjBrB,EAAYiB,GACZf,EAAYmB,GACZ3B,EAAoBuB,EAAQ,GAAGE,UAC9B,CAACV,EAAS/E,EAAMgF,IAEnB,IAAMc,EAA0B,SAACC,GAC/B,IAAMC,EAAiBD,EAAEE,OAAOC,MAEhC9B,EAAe4B,GACfhC,EACEgC,IAAmBlG,EAAYoE,IAAMG,EAAS,GAAGoB,MAAQlB,EAAS,GAAGkB,QAIzE,OACE,eAAC1C,EAAD,CAAkBE,cAAeA,EAAjC,UACE,eAACS,EAAD,WACE,cAACC,EAAD,CACEwC,KAAK,QACLC,GAAG,MACHxG,KAAK,MACLsG,MAAOpG,EAAYoE,IACnBmC,QAASlC,IAAgBrE,EAAYoE,IACrCoC,SAAUR,IAEZ,cAACzC,EAAD,CAAOkD,QAAQ,MAAf,iCAEA,cAAC5C,EAAD,CACEwC,KAAK,QACLC,GAAG,MACHxG,KAAK,MACLsG,MAAOpG,EAAY0G,IACnBH,QAASlC,IAAgBrE,EAAY0G,IACrCF,SAAUR,IAEZ,cAACzC,EAAD,CAAOkD,QAAQ,MAAf,qCAGDpC,IAAgBrE,EAAYoE,IAC3B,qCACE,cAACb,EAAD,CAAOE,OAAK,EAAZ,uCAEA,cAACC,EAAD,CAAQ8C,SAAUtC,EAAlB,SACGK,GACCA,EAAS1C,KAAI,SAACwD,GAAD,OACX,yBAAwBe,MAAOf,EAAIM,MAAnC,UACGN,EAAIM,MAAMgB,QAAQ,SAAU,IAD/B,KACsCtB,EAAIO,SAD1C,MAAaP,EAAIM,eAOzB,qCACE,cAACpC,EAAD,CAAOE,OAAK,EAAZ,wCAEA,cAACC,EAAD,CAAQ8C,SAAUtC,EAAlB,SACGO,GACCA,EAAS5C,KAAI,SAAC2D,GAAD,OACX,yBAAwBY,MAAOZ,EAAIG,MAAnC,UACGH,EAAIG,MAAMgB,QAAQ,SAAU,IAD/B,KACsCnB,EAAII,SAD1C,MAAaJ,EAAIG,eAQ3B,cAACvC,EAAD,CACEwD,QAAS,kBACPjC,GAAiB,SAACkC,GAAD,OAA2BA,MAFhD,SAKE,cAACxD,EAAD,CAAgBF,cAAeA,EAA/B,2B,SEhIIY,K,yBAAAA,E,wBAAAA,E,qBAAAA,E,kBAAAA,M,cAOAC,K,yBAAAA,E,wBAAAA,E,sBAAAA,M,KCLL,IAAM8C,EAAkBnH,IAAOC,IAAV,oSAefmH,EAAQpH,IAAOqH,EAAV,2FAMLC,EAAYtH,IAAOC,IAAV,wHAYTsH,GAAcvH,IAAOC,IAAV,oIAIF,SAACsD,GAAD,OAAWA,EAAMiE,SACrB,SAACjE,GAAD,OAAYA,EAAMkE,aAAelE,EAAMkE,aAAe,MAG3D7D,GAAQ5D,IAAOqH,EAAV,qEC5BLK,GAAgC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAC9C,OACE,eAACR,EAAD,WACE,cAACC,EAAD,gCAECO,EAAOzF,KAAI,SAAC0F,GAAD,OACV,eAACN,EAAD,WACE,cAACC,GAAD,CAAaC,MAAOI,EAAMJ,MAAOC,aAAcG,EAAMC,UACrD,cAAC,GAAD,UAAQD,EAAM/D,UAFA+D,EAAMjB,OAMxB,eAACW,EAAD,WACE,cAACC,GAAD,CAAaC,MAAOpD,EAAU0D,SAC9B,cAAC,GAAD,6BCVFH,GAAqB,CACzB,CACEhB,GAAI,mBACJa,MAAOpD,EAAU2D,eACjBF,QAASxD,EAAa0D,eACtBlE,MAAO,aAET,CACE8C,GAAI,kBACJa,MAAOpD,EAAU4D,cACjBH,QAASxD,EAAa2D,cACtBnE,MAAO,iBAET,CACE8C,GAAI,cACJa,MAAOpD,EAAU6D,WACjBJ,QAASxD,EAAa4D,WACtBpE,MAAO,qBAMEqE,GAAmB,WAC9BC,IAASC,YAAcjD,+FAGvB,IAAMkD,EAAeC,iBAAuB,MACtCpG,EAAMoG,iBAAmB,MAC/B,EAAkC9D,oBAAS,GAA3C,mBAAO+D,EAAP,KAAkBC,EAAlB,KACA,EAA4ChE,qBAA5C,mBAAOiE,EAAP,KAAuBC,EAAvB,KACA,EAAwClE,qBAAxC,mBAAOmE,EAAP,KAAqBC,EAArB,KACA,EAAkCpE,qBAAlC,mBAAOqE,EAAP,KAAkBC,EAAlB,KACA,EAAoCtE,qBAApC,mBAAOuE,EAAP,KAAmBC,EAAnB,KA4BAxD,qBAAU,WAERtD,EAAI+G,QAAU,IAAId,IAASe,IAAI,CAC7BC,UAAWd,EAAaY,SAAW,GACnCG,MAAOjE,sDACPkE,OAAQ,CAAC,EAAG,IACZC,mBAAmB,EACnBC,QAAS,IACTC,KAAM,MAELC,GAAG,QAAQ,WACV,IAAMC,EAASxH,EAAI+G,QACdS,IAELA,EAAOC,UAAU,gBAAiB,CAChCjD,KAAM,SACNkD,IAAK,0CAGPF,EAAOC,UAAU,SAAU,CACzBjD,KAAM,UACNnG,KAAM,kEAIRoH,GAAO7G,SAAQ,SAAC8G,GAEd8B,EAAOG,SACL,CACElD,GAAIiB,EAAMjB,GACVmD,OAAQ,gBACR,eAAgB,qBAChBpD,KAAM,OACNqD,MAAO,CACL,aAAcnC,EAAMJ,MACpB,qBAAsBI,EAAMC,QAC5B,eAAgB,EAChB,0BAA2B,CAAEmC,SA7ElB,OAgFf,iBAIFN,EAAOG,SACL,CACElD,GAAG,UAAD,OAAYiB,EAAMjB,IACpBmD,OAAQ,SACRpD,KAAM,OACNqD,MAAO,CACL,aAAcnC,EAAMJ,MACpB,qBAAsBI,EAAMC,QAC5B,eAAgB,EAChB,0BAA2B,CAAEmC,SA7FlB,OAgGf,kBAIFN,EAAOD,GAAG,QAAS7B,EAAMjB,IAAI,SAACL,GAC5B,IAAQ2D,EAAqB3D,EAArB2D,OAAQC,EAAa5D,EAAb4D,SAChB,GAAKA,GAAgC,IAApBA,EAAS5H,QAAiB4H,EAAS,GAAGC,WAAvD,CAGA,IAAMC,EAAeF,EAAS,GAAGC,WAC9BE,mBAEHrB,EAAc,CAAEiB,SAAQG,eAAcE,iBAAiB,QAIzDZ,EAAOD,GAAG,QAAV,iBAA6B7B,EAAMjB,KAAM,SAACL,GACxC,IAAQ2D,EAAqB3D,EAArB2D,OAAQC,EAAa5D,EAAb4D,SAChB,GAAKA,GAAgC,IAApBA,EAAS5H,QAAiB4H,EAAS,GAAGC,WAAvD,CAGA,IAAMC,EAAeF,EAAS,GAAGC,WAAWI,WAE5CvB,EAAc,CAAEiB,SAAQG,eAAcE,iBAAiB,QAIzDZ,EAAOD,GAAG,aAAc7B,EAAMjB,IAAI,WAChC+C,EAAOc,YAAYpB,MAAMqB,OAAS,aAGpCf,EAAOD,GAAG,aAAc7B,EAAMjB,IAAI,WAChC+C,EAAOc,YAAYpB,MAAMqB,OAAS,MAIpCf,EAAOD,GAAG,aAAV,iBAAkC7B,EAAMjB,KAAM,WAC5C+C,EAAOc,YAAYpB,MAAMqB,OAAS,aAGpCf,EAAOD,GAAG,aAAV,iBAAkC7B,EAAMjB,KAAM,WAC5C+C,EAAOc,YAAYpB,MAAMqB,OAAS,SAItCjC,GAAa,OAEdkC,WAAW,IAAIvC,IAASwC,kBAAqB,kBAC/C,IAGHnF,qBAAU,WACR,IAAMkE,EAASxH,EAAI+G,QACnB,GAAKF,GAAeW,GAAWjB,GAAmBE,EAAlD,CAEA,IAAQsB,EAA0ClB,EAA1CkB,OAAQG,EAAkCrB,EAAlCqB,aAAcE,EAAoBvB,EAApBuB,gBAG9B,EACE/H,EACE+H,EAAkB3B,EAAeF,EACjC2B,GAHIlH,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,YAAaC,EAAhC,EAAgCA,YAAaV,EAA7C,EAA6CA,aAM7C,IAAIwF,IAASyC,MAAM,CACjBC,UAAW,eACXC,aAAa,EACbC,aAAa,IAEZC,QAnJwB,SAC3B9H,EACAE,EACAC,EACAV,GAJ2B,4CAMIS,EANJ,+DAQMC,EARN,2FAUqCV,EAVrC,4BAavBO,GAA2B,KAAdA,EAAb,iCAC8BA,EAD9B,kGAbuB,cAoJvB+H,CAAqB/H,EAAWE,EAAaC,EAAaV,IAE3DuI,UAAUjB,GACVkB,MAAMzB,MACR,CAACX,IAGJvD,qBAAU,WACR,IAAM4F,EAAwB9K,EAC5BC,GAEI8K,EAAyBrJ,EAC7BzB,GAGFqI,EAAgByC,GAChB3C,EAAkB0C,KACjB,IAGH5F,qBAAU,WACR,IAAMkE,EAASxH,EAAI+G,QAEnB,GAAKR,GAAmBiB,GAAWnB,GAAcM,EAAjD,CAEA,MTrHoB,SACtBtI,EACA+K,GAMA,IAAMjK,EAAaf,EAAyBC,GAExCgL,EAAoBlK,EAAWZ,QACjC,SAACiC,GAAD,OAAaA,EAAQ4I,KAAiB3L,EAAWoI,kBAcnD,MAAO,CAAEyD,kBAZiBD,EAAkBrJ,KAAI,SAACuJ,GAAD,OAAaA,EAAQ9K,QAYzC+K,sBAV5BH,EAAoBlK,EAAWZ,QAC7B,SAACiC,GAAD,OAAaA,EAAQ4I,KAAiB3L,EAAWqI,kBAEJ9F,KAAI,SAACuJ,GAAD,OAAaA,EAAQ9K,QAOtBgL,qBALlDJ,EAAoBlK,EAAWZ,QAC7B,SAACiC,GAAD,OAAaA,EAAQ4I,KAAiB3L,EAAWsI,eAEL/F,KAAI,SAACuJ,GAAD,OAAaA,EAAQ9K,SS+FnEiL,CAASnD,EAAgBI,GADnB2C,EAAR,EAAQA,kBAAmBE,EAA3B,EAA2BA,qBAAsBC,EAAjD,EAAiDA,oBAGjD,ET/C0B,SAC5BpL,EACA+K,GAMA,IAAMjK,EAAaW,EAAwBzB,GAGrCsL,EAA2B,GACjCxK,EAAWP,SAAQ,SAACJ,GAClB,IAAMyB,EAAQjC,EAAW4L,MAAK,SAAC3J,GAAD,OAAWA,EAAMhC,OAASO,EAAIM,YACtDZ,EAAW+B,GAASA,EAAM/B,SAAY,KAE5C,OAAQM,EAAI4K,IACV,KAAK3L,EAAWoI,eACd8D,EAAW9K,KAAK,CACdX,UACAwC,OAAQjD,EAAWoI,iBAErB,MAEF,KAAKpI,EAAWqI,cACd6D,EAAW9K,KAAK,CACdX,UACAwC,OAAQjD,EAAWqI,gBAErB,MAEF,KAAKrI,EAAWsI,WACd4D,EAAW9K,KAAK,CACdX,UACAwC,OAAQjD,EAAWsI,iBAS3B,IAAI8D,EAAiBF,EAAWpL,QAC9B,SAACiC,GAAD,OAAaA,EAAQE,SAAWjD,EAAWoI,kBAc7C,MAAO,CAAEiE,eAZcD,EAAe7J,KAAI,SAACxB,GAAD,OAASA,EAAIN,WAY9B6L,mBAVzBF,EAAiBF,EAAWpL,QAC1B,SAACiC,GAAD,OAAaA,EAAQE,SAAWjD,EAAWqI,kBAEJ9F,KAAI,SAACxB,GAAD,OAASA,EAAIN,WAOd8L,kBAL5CH,EAAiBF,EAAWpL,QAC1B,SAACiC,GAAD,OAAaA,EAAQE,SAAWjD,EAAWsI,eAEL/F,KAAI,SAACxB,GAAD,OAASA,EAAIN,YSRrD+L,CAAe5L,EAAsBsI,GAD/BmD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBAAmBC,EAA3C,EAA2CA,iBAG3CE,EAAiB,GAEjBC,YAAW,WACT3C,EAAO4C,UAAU,mBAAjB,CACE,KACA,sBAFF,mBAGKd,KAGL9B,EAAO4C,UAAU,kBAAjB,CACE,KACA,sBAFF,mBAGKZ,KAGLhC,EAAO4C,UAAU,cAAjB,CACE,KACA,sBAFF,mBAGKX,KAGLjC,EAAO4C,UAAU,0BAAjB,CACE,KACA,YAFF,mBAGKN,KAGLtC,EAAO4C,UAAU,yBAAjB,CACE,KACA,YAFF,mBAGKL,KAGLvC,EAAO4C,UAAU,qBAAjB,CACE,KACA,YAFF,mBAGKJ,KAGLE,EAAiB,KA5OI,QA8OtB,CAAC3D,EAAgBF,EAAWM,IAE/B,IAAMuD,EAAmB,SAACG,GACxB5E,GAAO7G,SAAQ,SAAC8G,GAAW,IAAD,IACxB,UAAA1F,EAAI+G,eAAJ,SAAauD,iBAAiB5E,EAAMjB,GAAI,eAAgB4F,GACxD,UAAArK,EAAI+G,eAAJ,SAAauD,iBAAb,iBACY5E,EAAMjB,IAChB,eACA4F,OAWN,OACE,qCACE,cAACxM,EAAD,CAAc0M,IAAKpE,IAEnB,cAAC,EAAD,CAAS9D,oBAVe,SAC1B+B,GAEAwC,EAA0B,kBAANxC,EAAiBA,EAAIA,EAAEE,OAAOC,UAShD,cAAC,GAAD,CAAQkB,OAAQA,SCjSP+E,GATO,WACpB,OACE,sBAAK7B,UAAU,MAAf,UACE,cAAChL,EAAD,IACA,cAAC,GAAD,QCMS8M,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,sBAM1Bb,O","file":"static/js/main.f09da57a.chunk.js","sourcesContent":["import { parse, isAfter } from \"date-fns\";\nimport { VocDataRow } from \"../models/VocDataRow\";\nimport { VariantDataRow } from \"../models/VariantDataRow\";\nimport { statesList, StatesData } from \"../data/statesData\";\n\nexport enum DataStatus {\n  CheckedHasData = 1,\n  CheckedNoData = 0,\n  NotChecked = \"\",\n}\n\nexport enum BreakthroughStatus {\n  Yes = 1,\n  No = 0,\n  ToBeDetemined = \"\",\n}\n\nexport const getNonUsData = (data: VocDataRow[]): VocDataRow[] => {\n  return data.filter((row) => row.code !== \"USA\");\n};\n\n// Get only the most recent data for each country from the list\nexport const getMostRecentCountryData = (data: VocDataRow[]) => {\n  const dataWithAnyInfo = getNonUsData(data);\n\n  const locations: string[] = [];\n  dataWithAnyInfo.forEach((row) => {\n    locations.push(row.location);\n  });\n\n  // Remove all duplicates from locations array\n  const uniqueLocations = Array.from(new Set(locations));\n\n  // For each unique location get the most recent data\n  const recentData: VocDataRow[] = [];\n\n  uniqueLocations.forEach((location) => {\n    const locationArray = dataWithAnyInfo.filter(\n      (row) => row.location === location\n    );\n    let mostRecentDate = parse(\n      locationArray[0].epi_date,\n      \"dd.MM.yyyy\",\n      new Date()\n    );\n    let mostRecentRowIndex = 0;\n\n    locationArray.forEach((item, idx) => {\n      const date = parse(item.epi_date, \"dd.MM.yyyy\", new Date());\n      if (isAfter(date, mostRecentDate)) {\n        mostRecentDate = date;\n        mostRecentRowIndex = idx;\n      }\n    });\n\n    recentData.push(locationArray[mostRecentRowIndex]);\n  });\n\n  return recentData;\n};\n\n// Get only the most recent data for each US state from the list\nexport const getMostRecentStatesData = (data: VocDataRow[]): VocDataRow[] => {\n  // Get states data with any info\n  const statesNames = statesList.map((state) => state.name);\n  const stateRowsWithVocData = data.filter(\n    (row) => statesNames.includes(row.location) && row.code === \"USA\"\n  );\n\n  // Get the most recent data\n  const recentData: VocDataRow[] = [];\n\n  statesNames.forEach((name) => {\n    const locationArray = stateRowsWithVocData.filter(\n      (row) => row.location === name\n    );\n\n    if (locationArray.length > 0) {\n      let mostRecentDate = parse(\n        locationArray[0].epi_date,\n        \"dd.MM.yyyy\",\n        new Date()\n      );\n      let mostRecentRowIndex = 0;\n\n      locationArray.forEach((item, idx) => {\n        const date = parse(item.epi_date, \"dd.MM.yyyy\", new Date());\n        if (isAfter(date, mostRecentDate)) {\n          mostRecentDate = date;\n          mostRecentRowIndex = idx;\n        }\n      });\n\n      recentData.push(locationArray[mostRecentRowIndex]);\n    }\n  });\n\n  return recentData;\n};\n\n// Get list of all available VOC's from the spreadsheet (hardcoded for now)\nexport const getVocList = (data: VocDataRow[]) => {\n  const keys = Object.keys(data[0]);\n  const vocList = keys.slice(12, 65);\n\n  return vocList;\n};\n\n// Get list of country codes\nexport const getCountryCodes = (countries: VocDataRow[]) => {\n  return countries.map((country) => country.code);\n};\n\n// Sort data based on VOC info availability and variant name\nexport const sortData = (\n  data: VocDataRow[],\n  variantName: string\n): {\n  countriesWithData: string[];\n  countriesWithoutData: string[];\n  countriesNotChecked: string[];\n} => {\n  const recentData = getMostRecentCountryData(data);\n\n  let filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === DataStatus.CheckedHasData\n  );\n  const countriesWithData = filteredCountries.map((country) => country.code);\n\n  filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === DataStatus.CheckedNoData\n  );\n  const countriesWithoutData = filteredCountries.map((country) => country.code);\n\n  filteredCountries = recentData.filter(\n    (dataRow) => dataRow[variantName] === DataStatus.NotChecked\n  );\n  const countriesNotChecked = filteredCountries.map((country) => country.code);\n\n  return { countriesWithData, countriesWithoutData, countriesNotChecked };\n};\n\nexport const getBreakthroughStatusName = (\n  status: BreakthroughStatus\n): string => {\n  switch (status) {\n    case BreakthroughStatus.Yes:\n      return \"Yes\";\n\n    case BreakthroughStatus.No:\n      return \"No\";\n\n    case BreakthroughStatus.ToBeDetemined:\n      return \"To be determined\";\n\n    default:\n      return \"-\";\n  }\n};\n\n// Get source URL and date for specific country\nexport const getDetailedData = (\n  dataList: VocDataRow[],\n  location: string\n): {\n  countryName: string;\n  sourceUrl: string;\n  dateChecked: string;\n  breakthrough: string;\n} => {\n  const chosenCountry = dataList.filter(\n    (dataRow) => dataRow.code === location || dataRow.location === location\n  );\n\n  const breakthroughStatus = chosenCountry[0]\n    .breakthrough_status as BreakthroughStatus;\n  const breakthrough = getBreakthroughStatusName(breakthroughStatus);\n\n  return {\n    sourceUrl: chosenCountry[0].source_url,\n    countryName: chosenCountry[0].location,\n    dateChecked: chosenCountry[0].epi_date,\n    breakthrough,\n  };\n};\n\n// Prepare data from spreadsheet to display US states on the map\nexport const sortStatesData = (\n  data: VocDataRow[],\n  variantName: string\n): {\n  statesWithData: string[];\n  statesWithoutData: string[];\n  statesNotChecked: string[];\n} => {\n  const recentData = getMostRecentStatesData(data);\n\n  // Prepare states data in correct format for Mapbox data join\n  const statesData: StatesData[] = [];\n  recentData.forEach((row) => {\n    const state = statesList.find((state) => state.name === row.location);\n    const stateId = (state && state.stateId) || \"00\";\n\n    switch (row[variantName]) {\n      case DataStatus.CheckedHasData:\n        statesData.push({\n          stateId,\n          status: DataStatus.CheckedHasData,\n        });\n        break;\n\n      case DataStatus.CheckedNoData:\n        statesData.push({\n          stateId,\n          status: DataStatus.CheckedNoData,\n        });\n        break;\n\n      case DataStatus.NotChecked:\n        statesData.push({\n          stateId,\n          status: DataStatus.NotChecked,\n        });\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  let filteredStates = statesData.filter(\n    (dataRow) => dataRow.status === DataStatus.CheckedHasData\n  );\n  const statesWithData = filteredStates.map((row) => row.stateId);\n\n  filteredStates = statesData.filter(\n    (dataRow) => dataRow.status === DataStatus.CheckedNoData\n  );\n  const statesWithoutData = filteredStates.map((row) => row.stateId);\n\n  filteredStates = statesData.filter(\n    (dataRow) => dataRow.status === DataStatus.NotChecked\n  );\n  const statesNotChecked = filteredStates.map((row) => row.stateId);\n\n  return { statesWithData, statesWithoutData, statesNotChecked };\n};\n\n// Parse variant data from Google spreadsheet\nexport const parseVariantData = (\n  data: VariantDataRow[]\n): {\n  vocList: { pango: string; whoLabel: string }[];\n  voiList: { pango: string; whoLabel: string }[];\n} => {\n  const voc = data.filter((el) => el[\"is VoI\"].trim() === \"0\");\n  const voi = data.filter((el) => el[\"is VoI\"].trim() === \"1\");\n\n  const vocList = voc.map((vocEl) => {\n    return {\n      pango: vocEl[\"Pango lineage\"].trim(),\n      whoLabel: vocEl[\"WHO label\"].trim(),\n    };\n  });\n  const voiList = voi.map((voiEl) => {\n    return {\n      pango: voiEl[\"Pango lineage\"].trim(),\n      whoLabel: voiEl[\"WHO label\"].trim(),\n    };\n  });\n\n  return { vocList, voiList };\n};\n","import { createGlobalStyle } from \"styled-components\";\n\n// Some styles are commented out not to override css from viz app\nexport const GlobalStyle = createGlobalStyle`    \n    /* START COMMENT (PRODUCTION) */\n    /* body {\n        margin: 0;\n        font-family: 'Roboto', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;        \n        background-color: #ECF3F0;\n    }\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    a {\n        text-decoration: none;\n        outline: none;\n        color: inherit;        \n    } */\n    /* END COMMENT (PRODUCTION) */\n\n    .custom-popup {\n        z-index: 1000;\n        font-size: 12px;\n        width: auto;\n        overflow: hidden;            \n    }\n    .mapboxgl-popup-content h2 {\n        text-align: left;\n        display: block;        \n        margin: 0 0 10px 0;\n        font-size: 24px;        \n        font-weight: 400;\n        font-family: Mabry Pro, Inter, Helvetica, Arial, sans-serif;\n    }\n\n    /* START COMMENT (PRODUCTION) */\n    /* .mapboxgl-popup-content .popup {\n        background: #0094e2;\n        padding: 5px 15px;\n        margin: 10px 0;\n        color: #ffffff;\n        font-size: 12px;\n        text-transform: uppercase;\n        border-radius: 4px;\n        display: inline-block;        \n    } \n\n    .mapboxgl-popup-content .button:hover {\n        background: #007AEC;\n    } \n    .mapboxgl-popup-content p {\n        font-size: 14px;\n        margin: 0;\n    } */\n    /* END COMMENT (PRODUCTION) */\n`;\n","import styled from \"styled-components\";\n\nexport const MapContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n","import { DataStatus } from \"../utils/helperFunctions\";\n\nexport interface StatesData {\n  stateId: string;\n  status: DataStatus;\n}\n\nexport const statesList = [\n  { name: \"Alabama\", stateId: \"01\" },\n  { name: \"Alaska\", stateId: \"02\" },\n  { name: \"Arizona\", stateId: \"04\" },\n  { name: \"Arkansas\", stateId: \"05\" },\n  { name: \"California\", stateId: \"06\" },\n  { name: \"Colorado\", stateId: \"08\" },\n  { name: \"Connecticut\", stateId: \"09\" },\n  { name: \"Delaware\", stateId: \"10\" },\n  { name: \"Florida\", stateId: \"12\" },\n  { name: \"Georgia\", stateId: \"13\" },\n  { name: \"Hawaii\", stateId: \"15\" },\n  { name: \"Idaho\", stateId: \"16\" },\n  { name: \"Illinois\", stateId: \"17\" },\n  { name: \"Indiana\", stateId: \"18\" },\n  { name: \"Iowa\", stateId: \"19\" },\n  { name: \"Kansas\", stateId: \"20\" },\n  { name: \"Kentucky\", stateId: \"21\" },\n  { name: \"Louisiana\", stateId: \"22\" },\n  { name: \"Maine\", stateId: \"23\" },\n  { name: \"Maryland\", stateId: \"24\" },\n  { name: \"Massachusetts\", stateId: \"25\" },\n  { name: \"Michigan\", stateId: \"26\" },\n  { name: \"Minnesota\", stateId: \"27\" },\n  { name: \"Mississippi\", stateId: \"28\" },\n  { name: \"Missouri\", stateId: \"29\" },\n  { name: \"Montana\", stateId: \"30\" },\n  { name: \"Nebraska\", stateId: \"31\" },\n  { name: \"Nevada\", stateId: \"32\" },\n  { name: \"New Hampshire\", stateId: \"33\" },\n  { name: \"New Jersey\", stateId: \"34\" },\n  { name: \"New Mexico\", stateId: \"35\" },\n  { name: \"New York\", stateId: \"36\" },\n  { name: \"North Carolina\", stateId: \"37\" },\n  { name: \"North Dakota\", stateId: \"38\" },\n  { name: \"Ohio\", stateId: \"39\" },\n  { name: \"Oklahoma\", stateId: \"40\" },\n  { name: \"Oregon\", stateId: \"41\" },\n  { name: \"Pennsylvania\", stateId: \"42\" },\n  { name: \"Rhode Island\", stateId: \"44\" },\n  { name: \"South Carolina\", stateId: \"45\" },\n  { name: \"South Dakota\", stateId: \"46\" },\n  { name: \"Tennessee\", stateId: \"47\" },\n  { name: \"Texas\", stateId: \"48\" },\n  { name: \"Utah\", stateId: \"49\" },\n  { name: \"Vermont\", stateId: \"50\" },\n  { name: \"Virginia\", stateId: \"51\" },\n  { name: \"Washington\", stateId: \"53\" },\n  { name: \"West Virginia\", stateId: \"54\" },\n  { name: \"Wisconsin\", stateId: \"55\" },\n  { name: \"Wyoming\", stateId: \"56\" },\n];\n","import React, { useState, useEffect } from \"react\";\nimport useGoogleSheets from \"use-google-sheets\";\n\nimport { VariantDataRow } from \"../../models/VariantDataRow\";\nimport { parseVariantData } from \"../../utils/helperFunctions\";\nimport {\n  SidebarContainer,\n  Label,\n  Select,\n  VariantSelectionContainer,\n  StyledRadio,\n  SidebarTab,\n  SidebarTabIcon,\n} from \"./styled\";\n\ninterface SidebarProps {\n  handleVariantChange: (\n    e: React.ChangeEvent<HTMLSelectElement> | string\n  ) => void;\n}\n\nenum VariantType {\n  VOC = \"voc\",\n  VOI = \"voi\",\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({\n  handleVariantChange,\n}: SidebarProps) => {\n  const [variantType, setVariantType] = useState(VariantType.VOC);\n  const [vocArray, setVocArray] = useState<\n    { pango: string; whoLabel: string }[]\n  >([]);\n  const [voiArray, setVoiArray] = useState<\n    { pango: string; whoLabel: string }[]\n  >([]);\n  const [sidebarHidden, setSidebarHidden] = useState(false);\n\n  // Get data from Google sheets\n  const { data, loading, error } = useGoogleSheets({\n    apiKey: process.env.REACT_APP_GOOGLE_API_KEY || \"\",\n    sheetId: process.env.REACT_APP_SHEETS_ID || \"\",\n    sheetsNames: [process.env.REACT_APP_SHEET_NAME || \"\"],\n  });\n\n  // Parse VoC and VoI from spreadsheet\n  useEffect(() => {\n    if (error) {\n      alert(error);\n      return;\n    }\n    if (!data || loading) return;\n\n    const { vocList, voiList } = parseVariantData(\n      data[0].data as VariantDataRow[]\n    );\n\n    setVocArray(vocList);\n    setVoiArray(voiList);\n    handleVariantChange(vocList[0].pango);\n  }, [loading, data, error]);\n\n  const handleVariantTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newVariantType = e.target.value as VariantType;\n\n    setVariantType(newVariantType);\n    handleVariantChange(\n      newVariantType === VariantType.VOC ? vocArray[0].pango : voiArray[0].pango\n    );\n  };\n\n  return (\n    <SidebarContainer sidebarHidden={sidebarHidden}>\n      <VariantSelectionContainer>\n        <StyledRadio\n          type=\"radio\"\n          id=\"voc\"\n          name=\"voc\"\n          value={VariantType.VOC}\n          checked={variantType === VariantType.VOC}\n          onChange={handleVariantTypeChange}\n        />\n        <Label htmlFor=\"voc\">Variants of Concern</Label>\n\n        <StyledRadio\n          type=\"radio\"\n          id=\"voi\"\n          name=\"voi\"\n          value={VariantType.VOI}\n          checked={variantType === VariantType.VOI}\n          onChange={handleVariantTypeChange}\n        />\n        <Label htmlFor=\"voi\">Variants of Interest</Label>\n      </VariantSelectionContainer>\n\n      {variantType === VariantType.VOC ? (\n        <>\n          <Label block>Choose Variant of Concern</Label>\n\n          <Select onChange={handleVariantChange}>\n            {vocArray &&\n              vocArray.map((voc) => (\n                <option key={voc.pango} value={voc.pango}>\n                  {voc.pango.replace(\"total_\", \"\")} ({voc.whoLabel})\n                </option>\n              ))}\n          </Select>\n        </>\n      ) : (\n        <>\n          <Label block>Choose Variant of Interest</Label>\n\n          <Select onChange={handleVariantChange}>\n            {voiArray &&\n              voiArray.map((voi) => (\n                <option key={voi.pango} value={voi.pango}>\n                  {voi.pango.replace(\"total_\", \"\")} ({voi.whoLabel})\n                </option>\n              ))}\n          </Select>\n        </>\n      )}\n\n      <SidebarTab\n        onClick={() =>\n          setSidebarHidden((currentSidebarHidden) => !currentSidebarHidden)\n        }\n      >\n        <SidebarTabIcon sidebarHidden={sidebarHidden}>◀</SidebarTabIcon>\n      </SidebarTab>\n    </SidebarContainer>\n  );\n};\n","import styled from \"styled-components\";\n\ninterface SidebarContainerProps {\n  sidebarHidden: boolean;\n}\n\nexport const SidebarContainer = styled.div<SidebarContainerProps>`\n  position: absolute;\n  z-index: 100;\n  top: 15%;\n  left: 2ex;\n  width: 18rem;\n  margin-top: 0;\n  padding: 2ex;\n  background-color: white;\n  box-shadow: 0 10px 30px 1px rgb(0 0 0 / 10%);\n  backdrop-filter: blur(0.5rem);\n  transition: left 0.2s;\n  border-radius: 0.5rem;\n\n  ${(props) =>\n    props.sidebarHidden &&\n    `\n    left: -18rem;\n  `}\n`;\n\nexport const SidebarTab = styled.div`\n  position: absolute;\n  width: 2.5ex;\n  height: 5ex;\n  top: 5ex;\n  left: 100%;\n  background-color: #fff;\n  border-top-right-radius: 7px;\n  border-bottom-right-radius: 7px;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface SidebarTabIconProps {\n  sidebarHidden: boolean;\n}\n\nexport const SidebarTabIcon = styled.span<SidebarTabIconProps>`\n  font-size: 80%;\n  color: #aaa;\n  transition: transform 0.2s;\n\n  ${(props) =>\n    props.sidebarHidden &&\n    `\n      transform: rotateY(180deg);\n  `};\n`;\n\ninterface LabelProps {\n  block?: boolean;\n}\n\nexport const Label = styled.label<LabelProps>`\n  font-size: 14px;\n  font-weight: bold;\n  margin-left: 5px;\n\n  ${(props) =>\n    props.block &&\n    `\n      margin-left: 0;\n      display: block;\n      margin-bottom: 10px;      \n      font-weight: 400;      \n  `}\n`;\n\nexport const Select = styled.select`\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  min-width: 200px;\n`;\n\nexport const VariantSelectionContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const StyledRadio = styled.input`\n  &:last-of-type {\n    margin-left: 10px;\n  }\n`;\n","export enum FillColor {\n  CheckedHasData = \"#29b1ea\",\n  CheckedNoData = \"#88d0eb\",\n  NotChecked = \"#FD9986\",\n  NoData = \"#D7E9ED\",\n}\n\nexport enum OutlineColor {\n  CheckedHasData = \"#0074ab\",\n  CheckedNoData = \"#007AEC\",\n  NotChecked = \"#FD685B\",\n}\n\nexport interface MapLayer {\n  id: string;\n  color: FillColor;\n  outline: OutlineColor;\n  label: string;\n}\n","import styled from \"styled-components\";\n\nexport const LegendContainer = styled.div`\n  position: absolute;\n  top: 5.5rem;\n  right: 1rem;\n  padding: 0.5rem 0.25rem;\n  border-radius: 0.2rem;\n  z-index: 100;\n  background-color: rgba(255, 255, 255, 0.8);\n  font-size: 11px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Title = styled.p`\n  font-weight: bold;\n  margin: 0 0 8px 0;\n  color: #333333;\n`;\n\nexport const LegendRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 8px;\n`;\n\ninterface ColorSampleProps {\n  color: string;\n  outlineColor?: string;\n}\n\nexport const ColorSample = styled.div<ColorSampleProps>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${(props) => props.color};\n  border-color: ${(props) => (props.outlineColor ? props.outlineColor : \"\")};\n`;\n\nexport const Label = styled.p`\n  margin: 2px 0 0 0;\n  color: #333333;\n`;\n","import React from \"react\";\n\nimport { MapLayer, FillColor } from \"../../models/MapLayer\";\nimport {\n  LegendContainer,\n  Title,\n  LegendRow,\n  ColorSample,\n  Label,\n} from \"./styled\";\n\ninterface LegendProps {\n  layers: MapLayer[];\n}\n\nexport const Legend: React.FC<LegendProps> = ({ layers }: LegendProps) => {\n  return (\n    <LegendContainer>\n      <Title>Variant Reporting</Title>\n\n      {layers.map((layer) => (\n        <LegendRow key={layer.id}>\n          <ColorSample color={layer.color} outlineColor={layer.outline} />\n          <Label>{layer.label}</Label>\n        </LegendRow>\n      ))}\n\n      <LegendRow>\n        <ColorSample color={FillColor.NoData} />\n        <Label>No data</Label>\n      </LegendRow>\n    </LegendContainer>\n  );\n};\n","import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl, { Map } from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { VocDataRow } from \"../../models/VocDataRow\";\n\nimport data from \"../../data/voc-new.json\";\nimport { MapContainer } from \"./styled\";\nimport {\n  getMostRecentCountryData,\n  getMostRecentStatesData,\n  sortData,\n  getDetailedData,\n  sortStatesData,\n} from \"../../utils/helperFunctions\";\nimport { Sidebar } from \"../Sidebar\";\nimport { Legend } from \"../Legend\";\nimport { MapLayer, FillColor, OutlineColor } from \"../../models/MapLayer\";\n\n// Layers to be displayed on map\nconst layers: MapLayer[] = [\n  {\n    id: \"checked-has-data\",\n    color: FillColor.CheckedHasData,\n    outline: OutlineColor.CheckedHasData,\n    label: \"Reporting\",\n  },\n  {\n    id: \"checked-no-data\",\n    color: FillColor.CheckedNoData,\n    outline: OutlineColor.CheckedNoData,\n    label: \"Not reporting\",\n  },\n  {\n    id: \"not-checked\",\n    color: FillColor.NotChecked,\n    outline: OutlineColor.NotChecked,\n    label: \"To be determined\",\n  },\n];\n\nconst ANIMATION_DURATION = 500; // map animation duration in ms\n\nexport const VocMap: React.FC = () => {\n  mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || \"\";\n\n  // eslint-disable-next-line\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<Map | null>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [vocCountryData, setVocCountryData] = useState<VocDataRow[]>();\n  const [vocStateData, setVocStateData] = useState<VocDataRow[]>();\n  const [chosenVoc, setChosenVoc] = useState<string>();\n  const [popupState, setPopupState] = useState<{\n    lngLat: mapboxgl.LngLat;\n    locationCode: string;\n    stateResolution: boolean;\n  }>();\n\n  const renderedPopupContent = (\n    sourceUrl: string,\n    countryName: string,\n    dateChecked: string,\n    breakthrough: string\n  ): string =>\n    `<h2 className=\"popup-title\">${countryName}</h2>\n    <hr>\n    <strong>Date checked:</strong> ${dateChecked}\n    <br />\n    <strong>Breakthrough infections by variant reported:</strong> ${breakthrough}\n    <p>\n      ${\n        sourceUrl && sourceUrl !== \"\"\n          ? `<a class=\"popup\" href=\"${sourceUrl}\" target=\"_blank\">\n              Go To Public Source\n            </a>`\n          : `Source not available`\n      }\n    </p>`;\n\n  // Setup Mapbox and configure map\n  useEffect(() => {\n    // if (map.current) return;\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current || \"\",\n      style: process.env.REACT_APP_MAP_THEME_URL,\n      center: [0, 40],\n      renderWorldCopies: false,\n      minZoom: 1.5,\n      zoom: 2.5,\n    })\n      .on(\"load\", () => {\n        const mapRef = map.current;\n        if (!mapRef) return;\n\n        mapRef.addSource(\"countriesData\", {\n          type: \"vector\",\n          url: \"mapbox://mapbox.country-boundaries-v1\",\n        });\n\n        mapRef.addSource(\"states\", {\n          type: \"geojson\",\n          data: \"https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson\",\n        });\n\n        // Add layers to the map\n        layers.forEach((layer) => {\n          // Layer for countries\n          mapRef.addLayer(\n            {\n              id: layer.id,\n              source: \"countriesData\",\n              \"source-layer\": \"country_boundaries\",\n              type: \"fill\",\n              paint: {\n                \"fill-color\": layer.color,\n                \"fill-outline-color\": layer.outline,\n                \"fill-opacity\": 0,\n                \"fill-opacity-transition\": { duration: ANIMATION_DURATION },\n              },\n            },\n            \"country-label\"\n          );\n\n          // Layer for US states\n          mapRef.addLayer(\n            {\n              id: `states-${layer.id}`,\n              source: \"states\",\n              type: \"fill\",\n              paint: {\n                \"fill-color\": layer.color,\n                \"fill-outline-color\": layer.outline,\n                \"fill-opacity\": 0,\n                \"fill-opacity-transition\": { duration: ANIMATION_DURATION },\n              },\n            },\n            \"waterway-label\"\n          );\n\n          // Display a popup with selected data details\n          mapRef.on(\"click\", layer.id, (e) => {\n            const { lngLat, features } = e;\n            if (!features || features.length === 0 || !features[0].properties)\n              return;\n\n            const locationCode = features[0].properties\n              .iso_3166_1_alpha_3 as string;\n\n            setPopupState({ lngLat, locationCode, stateResolution: false });\n          });\n\n          // Display a popup with selected data details when clicking on individual state\n          mapRef.on(\"click\", `states-${layer.id}`, (e) => {\n            const { lngLat, features } = e;\n            if (!features || features.length === 0 || !features[0].properties)\n              return;\n\n            const locationCode = features[0].properties.STATE_NAME as string;\n\n            setPopupState({ lngLat, locationCode, stateResolution: true });\n          });\n\n          // Change cursor to pointer when hovering above countries\n          mapRef.on(\"mouseenter\", layer.id, () => {\n            mapRef.getCanvas().style.cursor = \"pointer\";\n          });\n\n          mapRef.on(\"mouseleave\", layer.id, () => {\n            mapRef.getCanvas().style.cursor = \"\";\n          });\n\n          // Change cursor to pointer when hovering above US states\n          mapRef.on(\"mouseenter\", `states-${layer.id}`, () => {\n            mapRef.getCanvas().style.cursor = \"pointer\";\n          });\n\n          mapRef.on(\"mouseleave\", `states-${layer.id}`, () => {\n            mapRef.getCanvas().style.cursor = \"\";\n          });\n        });\n\n        setMapLoaded(true);\n      })\n      .addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n  }, []);\n\n  // Display popup on the map with detailed data\n  useEffect(() => {\n    const mapRef = map.current;\n    if (!popupState || !mapRef || !vocCountryData || !vocStateData) return;\n\n    const { lngLat, locationCode, stateResolution } = popupState;\n\n    // Get source url and date checked based on clicked location\n    const { sourceUrl, countryName, dateChecked, breakthrough } =\n      getDetailedData(\n        stateResolution ? vocStateData : vocCountryData,\n        locationCode\n      );\n\n    new mapboxgl.Popup({\n      className: \"custom-popup\",\n      closeButton: false,\n      closeOnMove: true,\n    })\n      .setHTML(\n        renderedPopupContent(sourceUrl, countryName, dateChecked, breakthrough)\n      )\n      .setLngLat(lngLat)\n      .addTo(mapRef);\n  }, [popupState]);\n\n  // Prepare data\n  useEffect(() => {\n    const mostRecentCountryData = getMostRecentCountryData(\n      data as VocDataRow[]\n    );\n    const mostRecentVocStateData = getMostRecentStatesData(\n      data as VocDataRow[]\n    );\n\n    setVocStateData(mostRecentVocStateData);\n    setVocCountryData(mostRecentCountryData);\n  }, []);\n\n  // Display countries and states on the map\n  useEffect(() => {\n    const mapRef = map.current;\n\n    if (!vocCountryData || !mapRef || !mapLoaded || !chosenVoc) return;\n\n    const { countriesWithData, countriesWithoutData, countriesNotChecked } =\n      sortData(vocCountryData, chosenVoc);\n\n    const { statesWithData, statesWithoutData, statesNotChecked } =\n      sortStatesData(data as VocDataRow[], chosenVoc);\n\n    setLayersOpacity(0);\n\n    setTimeout(() => {\n      mapRef.setFilter(\"checked-has-data\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesWithData,\n      ]);\n\n      mapRef.setFilter(\"checked-no-data\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesWithoutData,\n      ]);\n\n      mapRef.setFilter(\"not-checked\", [\n        \"in\",\n        \"iso_3166_1_alpha_3\",\n        ...countriesNotChecked,\n      ]);\n\n      mapRef.setFilter(\"states-checked-has-data\", [\n        \"in\",\n        \"STATE_ID\",\n        ...statesWithData,\n      ]);\n\n      mapRef.setFilter(\"states-checked-no-data\", [\n        \"in\",\n        \"STATE_ID\",\n        ...statesWithoutData,\n      ]);\n\n      mapRef.setFilter(\"states-not-checked\", [\n        \"in\",\n        \"STATE_ID\",\n        ...statesNotChecked,\n      ]);\n\n      setLayersOpacity(1);\n    }, ANIMATION_DURATION);\n  }, [vocCountryData, mapLoaded, chosenVoc]);\n\n  const setLayersOpacity = (opacity: number) => {\n    layers.forEach((layer) => {\n      map.current?.setPaintProperty(layer.id, \"fill-opacity\", opacity);\n      map.current?.setPaintProperty(\n        `states-${layer.id}`,\n        \"fill-opacity\",\n        opacity\n      );\n    });\n  };\n\n  const handleVariantChange = (\n    e: React.ChangeEvent<HTMLSelectElement> | string\n  ) => {\n    setChosenVoc(typeof e === \"string\" ? e : e.target.value);\n  };\n\n  return (\n    <>\n      <MapContainer ref={mapContainer} />\n\n      <Sidebar handleVariantChange={handleVariantChange} />\n\n      <Legend layers={layers} />\n    </>\n  );\n};\n","import React from \"react\";\nimport { GlobalStyle } from \"./theme/globalStyles\";\n\nimport { VocMap } from \"./components/VocMap\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <VocMap />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"voc-map-container\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}